user nginx;

events {
	worker_connections 768;
}

http {
	include /etc/nginx/mime.types;

	log_format json-log escape=json '{'
		'"remote_addr":"$remote_addr",'	
		'"proxy_add_x_forwarded_for":"$proxy_add_x_forwarded_for",'
		'"host":"$http_host",'
		'"method":"$request_method",'
		'"uri":"$request_uri",'
		'"token":"$token",'
		'"identifier":"$identifier",'
		'"status":"$status"'
	'}';
	# For debugging
	#log_format json-log escape=json '{'
	#	'"remote_addr":"$remote_addr",'	
	#	'"proxy_add_x_forwarded_for":"$proxy_add_x_forwarded_for",'
	#	'"request_headers":"$request_headers",'	
	#	'"host":"$http_host",'
	#	'"method":"$request_method",'
	#	'"uri":"$request_uri",'
	#	'"token":"$token",'
	#	'"identifier":"$identifier",'
	#	'"status":"$status"'
	#'}';

	# Upstream to Plex
	upstream plex_backend {
		server ${PLEX_IP}:${PLEX_PORT};
		keepalive 32;
	}

	server {
		listen ${HTTPS_PORT} ssl http2;
		server_name ${HTTPS_HOST};

		# For debugging
		#set_by_lua $request_headers '
		#	local h = ngx.req.get_headers()
		#	local request_headers_all = ""
		#	for k, v in pairs(h) do
		#		request_headers_all = request_headers_all .. ""..k..": "..v..";"
		#	end
		#	return request_headers_all
		#';

		send_timeout 100m;

		resolver ${RESOLVERS} valid=300s;
		resolver_timeout 10s;

		ssl_certificate ${SSL_CERTIFICATE};
		ssl_certificate_key ${SSL_CERTIFICATE_KEY};

		ssl_session_cache shared:SSL:10m;
		ssl_session_timeout 10m;

		ssl_protocols TLSv1.2;
		ssl_prefer_server_ciphers on;
		#Intentionally not hardened for security for player support and encryption video streams has a lot of overhead with something like AES-256-GCM-SHA384.
		ssl_ciphers 'ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-DSS-AES128-GCM-SHA256:kEDH+AESGCM:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-DSS-AES128-SHA256:DHE-RSA-AES256-SHA256:DHE-DSS-AES256-SHA:DHE-RSA-AES256-SHA:ECDHE-RSA-DES-CBC3-SHA:ECDHE-ECDSA-DES-CBC3-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:AES:CAMELLIA:DES-CBC3-SHA:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!aECDH:!EDH-DSS-DES-CBC3-SHA:!EDH-RSA-DES-CBC3-SHA:!KRB5-DES-CBC3-SHA';

		ssl_stapling on;
		ssl_stapling_verify on;

		#Turning this on will increase performance, but at the cost of security. Read below before making a choice.
		ssl_session_tickets off;

		ssl_dhparam /data/dhparam.pem;
		ssl_ecdh_curve secp384r1;

		gzip on;
		gzip_vary on;
		gzip_min_length 1000;
		gzip_proxied any;
		gzip_types text/plain text/css text/xml application/xml text/javascript application/x-javascript image/svg+xml;
		gzip_disable "MSIE [1-6]\.";

		client_max_body_size 100M;

		proxy_set_header Host $host;
		proxy_set_header X-Real-IP $remote_addr;
		proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
		proxy_set_header X-Forwarded-Proto $scheme;
		proxy_set_header Sec-WebSocket-Extensions $http_sec_websocket_extensions;
		proxy_set_header Sec-WebSocket-Key $http_sec_websocket_key;
		proxy_set_header Sec-WebSocket-Version $http_sec_websocket_version;

		proxy_http_version 1.1;
		proxy_set_header Upgrade $http_upgrade;
		proxy_set_header Connection "Upgrade";

		proxy_redirect off;
		proxy_buffering off;

		#access_log /var/log/nginx/access.log;
		access_log off;

		set $pass_to_log 0;
		if ( $args !~ "plex-cluster=1" ) {
			set $pass_to_log 1;
		}

		set $token "";
		if ( $http_x_plex_token ) {
			set $token $http_x_plex_token;
		}

		set $identifier "";
		if ( $http_x_plex_client_identifier ) {
			set $identifier $http_x_plex_client_identifier;
		}

		location /:/scrobble {
			access_log /var/log/nginx/access.log json-log if=$pass_to_log;
			access_log /var/log/nginx/plex.log json-log if=$pass_to_log;
			proxy_pass https://plex_backend;
		}

		location /:/unscrobble {
			access_log /var/log/nginx/access.log json-log if=$pass_to_log;
			access_log /var/log/nginx/plex.log json-log if=$pass_to_log;
			proxy_pass https://plex_backend;
		}

		location /:/timeline {
			if ( $args !~ "state=stopped" ) {
				set $pass_to_log 0;
			}
			access_log /var/log/nginx/access.log json-log;
			access_log /var/log/nginx/plex.log json-log if=$pass_to_log;
			proxy_pass https://plex_backend;
		}

		location / {
			#access_log /var/log/nginx/access.log json-log;
			proxy_pass https://plex_backend;
		}
	}
}

events {
	worker_connections 768;
}

http {
	include /etc/nginx/mime.types;

	log_format json-log escape=json '{'
		'"remote_addr":"$remote_addr",'	
		'"proxy_add_x_forwarded_for":"$proxy_add_x_forwarded_for",'
		'"host":"$http_host",'
		'"method":"$request_method",'
		'"uri":"$request_uri",'
		'"token":"$token",'
		'"identifier":"$identifier",'
		'"status":"$status"'
	'}';

	# Upstream to Plex
	upstream plex_backend {
		server ${PLEX_IP}:32400;
		keepalive 32;
	}

	server {
		listen 32300 ssl http2;
		server_name ${HTTPS_HOST};

		# For debugging
		#set_by_lua $request_headers '
		#	local h = ngx.req.get_headers()
		#	local request_headers_all = ""
		#	for k, v in pairs(h) do
		#		request_headers_all = request_headers_all .. ""..k..": "..v..";"
		#	end
		#	return request_headers_all
		#';

		send_timeout 100m;

		resolver ${RESOLVERS} valid=300s;
		resolver_timeout 10s;

		ssl_certificate /certs/fullchain.pem
		ssl_certificate_key /certs/privkey.pem

		ssl_session_cache shared:SSL:10m;
		ssl_session_timeout 10m;

		ssl_protocols TLSv1.2;
		ssl_prefer_server_ciphers on;
		#Intentionally not hardened for security for player support and encryption video streams has a lot of overhead with something like AES-256-GCM-SHA384.
		ssl_ciphers 'ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-DSS-AES128-GCM-SHA256:kEDH+AESGCM:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-DSS-AES128-SHA256:DHE-RSA-AES256-SHA256:DHE-DSS-AES256-SHA:DHE-RSA-AES256-SHA:ECDHE-RSA-DES-CBC3-SHA:ECDHE-ECDSA-DES-CBC3-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:AES:CAMELLIA:DES-CBC3-SHA:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!aECDH:!EDH-DSS-DES-CBC3-SHA:!EDH-RSA-DES-CBC3-SHA:!KRB5-DES-CBC3-SHA';

		ssl_stapling on;
		ssl_stapling_verify on;

		#Turning this on will increase performance, but at the cost of security. Read below before making a choice.
		ssl_session_tickets off;

		ssl_dhparam /data/dhparam.pem;
		ssl_ecdh_curve secp384r1;

		gzip on;
		gzip_vary on;
		gzip_min_length 1000;
		gzip_proxied any;
		gzip_types text/plain text/css text/xml application/xml text/javascript application/x-javascript image/svg+xml;
		gzip_disable "MSIE [1-6]\.";

		client_max_body_size 100M;

		proxy_set_header Host $host;
		proxy_set_header X-Real-IP $remote_addr;
		proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
		proxy_set_header X-Forwarded-Proto $scheme;
		proxy_set_header Sec-WebSocket-Extensions $http_sec_websocket_extensions;
		proxy_set_header Sec-WebSocket-Key $http_sec_websocket_key;
		proxy_set_header Sec-WebSocket-Version $http_sec_websocket_version;

		proxy_http_version 1.1;
		proxy_set_header Upgrade $http_upgrade;
		proxy_set_header Connection "Upgrade";

		proxy_redirect off;
		proxy_buffering off;

		#access_log /var/log/nginx/access.log;
		access_log off;

		set $pass_to_log 0;
		if ( $args !~ "plex-cluster=1" ) {
			set $pass_to_log 1;
		}

		set $token "";
		if ( $http_x_plex_token ) {
			set $token $http_x_plex_token;
		}

		set $identifier "";
		if ( $http_x_plex_client_identifier ) {
			set $identifier $http_x_plex_client_identifier;
		}

		location /:/scrobble {
			access_log /var/log/nginx/access.log json-log if=$pass_to_log;
			access_log /var/log/nginx/plex.log json-log if=$pass_to_log;
			proxy_pass https://plex_backend;
		}

		location /:/unscrobble {
			access_log /var/log/nginx/access.log json-log if=$pass_to_log;
			access_log /var/log/nginx/plex.log json-log if=$pass_to_log;
			proxy_pass https://plex_backend;
		}

		location /:/timeline {
			if ( $args !~ "state=stopped" ) {
				set $pass_to_log 0;
			}
			access_log /var/log/nginx/access.log json-log;
			access_log /var/log/nginx/plex.log json-log if=$pass_to_log;
			proxy_pass https://plex_backend;
		}

		location / {
			#access_log /var/log/nginx/access.log json-log;
			proxy_pass https://plex_backend;
		}
	}
}
